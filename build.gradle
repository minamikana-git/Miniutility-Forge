plugins {
    id 'java'
    id 'net.minecraftforge.gradle' version '6.0.33' // Updated Forge Gradle version
    id 'org.jetbrains.kotlin.jvm' version '1.9.10' // Updated Kotlin version
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

minecraft {
    mappings channel: 'official', version: '1.20.1' // Updated to 1.20.1 mappings
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }
        client { property 'forge.enabledGameTestNamespaces', mod_id }
        server { property 'forge.enabledGameTestNamespaces', mod_id; args '--nogui' }
        gameTestServer { property 'forge.enabledGameTestNamespaces', mod_id }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { name = "Forge"; url = "https://maven.minecraftforge.net/" }
    maven { name = "Minecraft"; url = "https://libraries.minecraft.net/" }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20.1-${forge_version}" // Updated Minecraft dependency to 1.20.1
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10" // Updated Kotlin stdlib for compatibility
}

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
            minecraft_version      : '1.20.1', // Updated to 1.20.1
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors            : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
kotlin {
    jvmToolchain(21)
}